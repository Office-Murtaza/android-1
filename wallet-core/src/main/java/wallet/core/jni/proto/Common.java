// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Common.proto

package wallet.core.jni.proto;

public final class Common {
  private Common() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }

  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
    registerAllExtensions(
        (com.google.protobuf.ExtensionRegistryLite) registry);
  }
  /**
   * Protobuf enum {@code TW.Common.Proto.SigningError}
   */
  public enum SigningError
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <pre>
     * OK
     * </pre>
     *
     * <code>OK = 0;</code>
     */
    OK(0),
    /**
     * <pre>
     * chain-generic, generic
     * </pre>
     *
     * <code>Error_general = 1;</code>
     */
    Error_general(1),
    /**
     * <code>Error_internal = 2;</code>
     */
    Error_internal(2),
    /**
     * <pre>
     * chain-generic, input
     * </pre>
     *
     * <code>Error_low_balance = 3;</code>
     */
    Error_low_balance(3),
    /**
     * <pre>
     * Requested amount is zero
     * </pre>
     *
     * <code>Error_zero_amount_requested = 4;</code>
     */
    Error_zero_amount_requested(4),
    /**
     * <code>Error_missing_private_key = 5;</code>
     */
    Error_missing_private_key(5),
    /**
     * <pre>
     * chain-generic, fee
     * </pre>
     *
     * <code>Error_wrong_fee = 6;</code>
     */
    Error_wrong_fee(6),
    /**
     * <pre>
     * chain-generic, signing
     * </pre>
     *
     * <code>Error_signing = 7;</code>
     */
    Error_signing(7),
    /**
     * <pre>
     * [NEO] Transaction too big, fee in GAS needed or try send by parts
     * </pre>
     *
     * <code>Error_tx_too_big = 8;</code>
     */
    Error_tx_too_big(8),
    /**
     * <pre>
     * UTXO-chain specific, inputs
     * </pre>
     *
     * <code>Error_missing_input_utxos = 9;</code>
     */
    Error_missing_input_utxos(9),
    /**
     * <pre>
     * Not enough non-dust input UTXOs to cover requested amount (dust UTXOs are filtered out) [BTC]
     * </pre>
     *
     * <code>Error_not_enough_utxos = 10;</code>
     */
    Error_not_enough_utxos(10),
    /**
     * <pre>
     * UTXO-chain specific, script
     * </pre>
     *
     * <code>Error_script_redeem = 11;</code>
     */
    Error_script_redeem(11),
    /**
     * <pre>
     * [BTC] Invalid output script
     * </pre>
     *
     * <code>Error_script_output = 12;</code>
     */
    Error_script_output(12),
    /**
     * <pre>
     * [BTC] Unrecognized witness program
     * </pre>
     *
     * <code>Error_script_witness_program = 13;</code>
     */
    Error_script_witness_program(13),
    UNRECOGNIZED(-1),
    ;

    /**
     * <pre>
     * OK
     * </pre>
     *
     * <code>OK = 0;</code>
     */
    public static final int OK_VALUE = 0;
    /**
     * <pre>
     * chain-generic, generic
     * </pre>
     *
     * <code>Error_general = 1;</code>
     */
    public static final int Error_general_VALUE = 1;
    /**
     * <code>Error_internal = 2;</code>
     */
    public static final int Error_internal_VALUE = 2;
    /**
     * <pre>
     * chain-generic, input
     * </pre>
     *
     * <code>Error_low_balance = 3;</code>
     */
    public static final int Error_low_balance_VALUE = 3;
    /**
     * <pre>
     * Requested amount is zero
     * </pre>
     *
     * <code>Error_zero_amount_requested = 4;</code>
     */
    public static final int Error_zero_amount_requested_VALUE = 4;
    /**
     * <code>Error_missing_private_key = 5;</code>
     */
    public static final int Error_missing_private_key_VALUE = 5;
    /**
     * <pre>
     * chain-generic, fee
     * </pre>
     *
     * <code>Error_wrong_fee = 6;</code>
     */
    public static final int Error_wrong_fee_VALUE = 6;
    /**
     * <pre>
     * chain-generic, signing
     * </pre>
     *
     * <code>Error_signing = 7;</code>
     */
    public static final int Error_signing_VALUE = 7;
    /**
     * <pre>
     * [NEO] Transaction too big, fee in GAS needed or try send by parts
     * </pre>
     *
     * <code>Error_tx_too_big = 8;</code>
     */
    public static final int Error_tx_too_big_VALUE = 8;
    /**
     * <pre>
     * UTXO-chain specific, inputs
     * </pre>
     *
     * <code>Error_missing_input_utxos = 9;</code>
     */
    public static final int Error_missing_input_utxos_VALUE = 9;
    /**
     * <pre>
     * Not enough non-dust input UTXOs to cover requested amount (dust UTXOs are filtered out) [BTC]
     * </pre>
     *
     * <code>Error_not_enough_utxos = 10;</code>
     */
    public static final int Error_not_enough_utxos_VALUE = 10;
    /**
     * <pre>
     * UTXO-chain specific, script
     * </pre>
     *
     * <code>Error_script_redeem = 11;</code>
     */
    public static final int Error_script_redeem_VALUE = 11;
    /**
     * <pre>
     * [BTC] Invalid output script
     * </pre>
     *
     * <code>Error_script_output = 12;</code>
     */
    public static final int Error_script_output_VALUE = 12;
    /**
     * <pre>
     * [BTC] Unrecognized witness program
     * </pre>
     *
     * <code>Error_script_witness_program = 13;</code>
     */
    public static final int Error_script_witness_program_VALUE = 13;


    public final int getNumber() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalArgumentException(
            "Can't get the number of an unknown enum value.");
      }
      return value;
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static SigningError valueOf(int value) {
      return forNumber(value);
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     */
    public static SigningError forNumber(int value) {
      switch (value) {
        case 0: return OK;
        case 1: return Error_general;
        case 2: return Error_internal;
        case 3: return Error_low_balance;
        case 4: return Error_zero_amount_requested;
        case 5: return Error_missing_private_key;
        case 6: return Error_wrong_fee;
        case 7: return Error_signing;
        case 8: return Error_tx_too_big;
        case 9: return Error_missing_input_utxos;
        case 10: return Error_not_enough_utxos;
        case 11: return Error_script_redeem;
        case 12: return Error_script_output;
        case 13: return Error_script_witness_program;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<SigningError>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        SigningError> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<SigningError>() {
            public SigningError findValueByNumber(int number) {
              return SigningError.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalStateException(
            "Can't get the descriptor of an unrecognized enum value.");
      }
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return wallet.core.jni.proto.Common.getDescriptor().getEnumTypes().get(0);
    }

    private static final SigningError[] VALUES = values();

    public static SigningError valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      if (desc.getIndex() == -1) {
        return UNRECOGNIZED;
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private SigningError(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:TW.Common.Proto.SigningError)
  }


  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static  com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\014Common.proto\022\017TW.Common.Proto*\341\002\n\014Sign" +
      "ingError\022\006\n\002OK\020\000\022\021\n\rError_general\020\001\022\022\n\016E" +
      "rror_internal\020\002\022\025\n\021Error_low_balance\020\003\022\037" +
      "\n\033Error_zero_amount_requested\020\004\022\035\n\031Error" +
      "_missing_private_key\020\005\022\023\n\017Error_wrong_fe" +
      "e\020\006\022\021\n\rError_signing\020\007\022\024\n\020Error_tx_too_b" +
      "ig\020\010\022\035\n\031Error_missing_input_utxos\020\t\022\032\n\026E" +
      "rror_not_enough_utxos\020\n\022\027\n\023Error_script_" +
      "redeem\020\013\022\027\n\023Error_script_output\020\014\022 \n\034Err" +
      "or_script_witness_program\020\rB\027\n\025wallet.co" +
      "re.jni.protob\006proto3"
    };
    descriptor = com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
        });
  }

  // @@protoc_insertion_point(outer_class_scope)
}
